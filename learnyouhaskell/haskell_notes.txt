Lazy, statically typed, type inference, values are immutable once you define them.
Elegant and concise.
You tell the computer what stuff is rather than what to do to stuff.


LIST COMPREHENSIONS:
[x*2 | x <- [1..10], x*2 >= 12]
removeNonUppercase st = [ c | c <- st, c `elem` ['A'..'Z']]

Everything after the comma is a predicate.
Weeding out lists by predicates is called filtering.


TUPLES:
Used when you know exactly how many values you want to combine.
Each tuple in a list must have the same number of elements.

[(1,2),(8,11),(4,5)]


ZIP:
zip can take two lists that contain different types and zip them together.
zip [5,3,2,6,2,7,2,5,4,6,6] ["im","a","turtle"]


TYPECLASSES:
Eq is used for types that support equality testing.
    Implements functions == and /=

Ord is for types that have an ordering.
    Covers standard comparing functions, such as >, <, >=, <=

Show members can be presented as strings.
    Most used function of Show typeclass is show.

Read is basically the opposite typeclass as Show.
    read function takes a string and returns a type which is a member of Read.
    ** Use explicit type annotations to specify the type of an expression.
read 4 :: int

Enum members are sequentially ordered types, i.e. they can be enumerated.
    Types in Enum include (), Bool, Char, Ordering, Int, Integer, Float, Double.
['a'..'e']
succ 'B'

Bounded members have an upper and lower bound.
minBound :: Int
maxBound :: Char
maxBound :: Bool

Num is a numeric typeclass. Its members must be able to act like numbers.
    Whole numbers can act like any type that is a member of the Num typeclass.
    To join Num and type must already be friends with Show and Eq.

Integral is another numeric typeclass, and only contains whole numbers.
    Int and Integer are in this class.

Floating includes only floating point numbers, so Float and Double.

fromIntegral is a very useful function, since it makes whole numbers more general.

===================================================================================
PATTERN MATCHING:
lotto :: (Integral a) => a -> String
lotto 7  = "Today is your lucky day, pal"
lotto 13 = "UNLUCKY NUMBER 13!"
lotto _  = "You didn't hit anything noteworthy"

You should always include a catch-all pattern so programs don't crash.
Pattern matching works in list comprehensions too:
xs = [(1,3),(4,3),(2,4),(5,3),(5,6),(3,1)]
xsAddTuplePairs = [a+b | (a,b) <- xs]

[1,2,3] is just syntactic sugar for 1:2:3:[]

As patterns let you break something up according to a pattern and bind it to names.
    Still keep a reference to the whole thing.
capital :: String -> String
capital "" = "Empty string, whoops!"
capital all@(x:xs) = "The first letter of " ++ all ++ " is " ++ [x]


GUARDS:
Way of testing whether some property of a value (or several) are true or false.
Similar to an if statement, but more readable when you have several conditions.
Just checking True or False (boolean), rather than matching a pattern.
bmiTell :: (RealFloat a) => a -> String
bmiTell :: (RealFloat a) => a -> a -> String
bmiTell weight height
    | bmi <= 18.5 = "You're underweight, you emo, you!"
    | bmi <= 25.0 = "You're supposedly normal. Pffft, I bet you're ugly!"
    | bmi <= 30.0 = "You're fat! Lose some weight, fatty!"
    | otherwise   = "You're a whale, congratulations!"
    where bmi = weight / height ^ 2

The "where" binding is used to define names or functions which are visible across the guards. Give the advantage of not having to repeat outselves.


LET:

"Let" bindings are very similar to "where" bindings.
The difference is that "let" bindings are expressions themselves.
"Where" bindings are just syntactic constructs.

The form is let <bindings> in <expression>
The names that you define in the let part are accessible to the expression after in.

cylinder :: (RealFloat a) => a -> a -> a
cylinder r h =
    let sideArea = 2 * pi * r * h
        topArea = pi * r ^ 2
    in sideArea + 2 * topArea

You can use let bindings almost anywhere, just like if statements.
ghci> 4 * (let a = 9 in a + 1) + 2

ghci> [let square x = x * x in (square 5, square 3, square 2)]

ghci> (let (a,b,c) = (1,2,3) in a+b+c) * 100

You can put let bindings in list comprehensions:
calcBmis :: (RealFloat a) => [(a,a)] -> [a]
calcBmis xs = [bmi | (w,h) <- xs, let bmi = w / h ^ 2]

Let bindings are expressions, so they can't be used across guards.


CASE EXPRESSIONS:
The syntax for case expressions is

case expression of pattern -> result
                   pattern -> result
                   pattern -> result
                   pattern -> result
                   ...

The first pattern that matches the expression is used.

describeList :: [a] -> String
describeList xs = "The list is " ++ case xs of [] -> "empty."
                                               [x] -> "a singleton list."
                                               x -> "a longer list."

===================================================================================
RECURSION:

